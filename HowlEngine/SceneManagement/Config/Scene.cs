// NOTE:
// Use QuickType to generate all this code.
// modify it when it needs to be.


// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using HowlEngine.Graphics;
//
//    var sceneData = SceneData.FromJson(jsonString);

namespace HowlEngine.SceneManagement.Config
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    using HowlEngine.Json;

    public partial class Scene
    {
        [JsonPropertyName("compressionlevel")]
        public long Compressionlevel { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("infinite")]
        public bool Infinite { get; set; }

        [JsonPropertyName("layers")]
        public LayerGroup[] LayerGroup { get; set; }

        [JsonPropertyName("nextlayerid")]
        public long Nextlayerid { get; set; }

        [JsonPropertyName("nextobjectid")]
        public long Nextobjectid { get; set; }

        [JsonPropertyName("orientation")]
        public string Orientation { get; set; }

        [JsonPropertyName("renderorder")]
        public string Renderorder { get; set; }

        [JsonPropertyName("tiledversion")]
        public string Tiledversion { get; set; }

        [JsonPropertyName("tileheight")]
        public long Tileheight { get; set; }

        [JsonPropertyName("tilesets")]
        public Tileset[] Tilesets { get; set; }

        [JsonPropertyName("tilewidth")]
        public long Tilewidth { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }
    }

    public partial class LayerGroup
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("layers")]
        public Layer[] Layers { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("opacity")]
        public long Opacity { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }
    }

    public partial class Layer
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("data")]
        public long[] Data { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("height")]
        public long? Height { get; set; }

        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("opacity")]
        public long Opacity { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("width")]
        public long? Width { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("draworder")]
        public string Draworder { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("objects")]
        public Object[] Objects { get; set; }
    }

    public partial class Object
    {
        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("properties")]
        public Property[] Property { get; set; }

        [JsonPropertyName("rotation")]
        public long Rotation { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("template")]
        public string Template { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("visible")]
        public bool Visible { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("x")]
        public float X { get; set; }

        [JsonPropertyName("y")]
        public float Y { get; set; }
    }

    public partial class Tileset
    {
        [JsonPropertyName("firstgid")]
        public long Firstgid { get; set; }

        [JsonPropertyName("source")]
        public string Source { get; set; }
    }

    public partial class Property
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("value")]
        public object Value { get; set; }
    }

    public partial class Template
    {
        [JsonPropertyName("object")]
        public Object Object { get; set; }

        [JsonPropertyName("tileset")]
        public Tileset Tileset { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }
    }

    public partial class Template
    {
        public static Template FromJson(string json) => JsonSerializer.Deserialize<Template>(json, HowlEngine.Json.Converter.Settings);
    }

    public partial class Scene
    {
        public static Scene FromJson(string json) => JsonSerializer.Deserialize<Scene>(json, HowlEngine.Json.Converter.Settings);
    }

}
