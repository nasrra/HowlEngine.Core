// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using HowlEngine;
//
//    var tilesetData = TilesetData.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;

namespace HowlEngine.Graphics{

    public struct Tileset{
        public Tileset(){}

        [JsonPropertyName("columns")]
        public long Columns { get; set; }

        [JsonPropertyName("image")]
        public string Image { get; set; }

        [JsonPropertyName("imageheight")]
        public long ImageHeight { get; set; }

        [JsonPropertyName("imagewidth")]
        public long ImageWidth { get; set; }

        [JsonPropertyName("margin")]
        public long Margin { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("spacing")]
        public long Spacing { get; set; }

        [JsonPropertyName("tilecount")]
        public long Tilecount { get; set; }

        [JsonPropertyName("tiledversion")]
        public string TiledVersion { get; set; }

        [JsonPropertyName("tileheight")]
        public long TileHeight { get; set; }

        [JsonPropertyName("tilewidth")]
        public long TileWidth { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }

        [JsonIgnore]
        public TextureRegion[] TileIds {get; private set;}

        [JsonIgnore]
        /// <summary>
        /// Gets or Sets the source texture represented by this texture atlas.
        /// </summary>
        public Texture2D Texture {get; private set;}

        [JsonIgnore]
        public int FirstGid {get; set;} = 1;

        public static Tileset FromJson(string json){
            Tileset tileset = JsonSerializer.Deserialize<Tileset>(json, HowlEngine.Json.Converter.Settings);
            
            // load the tileset image.
            // trim the '../' for texture atlas to load in correctly from the images folder.            
            long imageHeight    = tileset.ImageHeight;
            long imageWidth     = tileset.ImageWidth;
            long tileHeight     = tileset.TileHeight;
            long tileWidth      = tileset.TileWidth;
            long relativeWidth  = imageWidth / tileWidth;
            long relativeHeight = imageHeight / tileHeight;
            long relativeCount  = relativeWidth * relativeHeight;

            //Set id's for each
            
            tileset.TileIds = new TextureRegion[relativeCount+1];
            int i = 1;
            for(long y = 0; y < relativeHeight; y++){
                for(long x = 0; x < relativeWidth; x++){
                    tileset.TileIds[i] = new TextureRegion((int)(x*tileWidth), (int)(y*tileHeight), (int)tileWidth, (int)tileHeight);
                    i++;
                }
            }

            // load the texture for the tileset.
            tileset.Texture = Texture2D.FromFile(HowlApp.GraphicsDevice, System.IO.Path.Combine(HowlApp.ImagesFileDirectory, System.IO.Path.Combine("Tilesets", tileset.Image)));

            // return the tileset.
            return tileset;
        }

        public TileSprite CreateTileSprite(Vector2 position, int tileId){
            return new TileSprite(TileIds[tileId-(FirstGid-1)], FirstGid, position);
        }
        
        public void Dispose(){
            Texture.Dispose();
            Texture = null;
        }
    }
}